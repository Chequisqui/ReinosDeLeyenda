<?xml version="1.0" encoding="UTF-8"?>
<blowtorch xmlversion="2">
    <plugins>
    <plugin author="Daniel Block" name="layout_manager" id="494">
        <windows>
            <window name="layout_manager" id="100123" script="foreground"/>
        </windows>
        <script name="background" execute="true">
            dofile(GetPluginInstallDirectory().."/backgroundboot.lua")
        </script>
        <script name="foreground">
            dofile(GetPluginInstallDirectory().."/foregroundboot.lua")
        </script>
    </plugin>
    <plugin author="Daniel Block" name="stat_mon" id="88">
	<triggers>
		<trigger title="statmon" pattern="%char.stats" interpretLiteral="false" fireOnce="false" enabled="true" sequence="1">
			<script function="updateStat" fireWhen="always"/>
		</trigger>
	</triggers>
	<windows>
		<window name="stat_window" id="9020" script="statWindowUI">
			<layoutGroup target="xlarge">
				<layout orientation="landscape"
				height="100"
				width="400"
				below="1010"
					/>
			</layoutGroup>
			<layoutGroup target="large">
				<layout orientation="landscape"
				height="50"
				width="200"
				below="1010"
				/>
			</layoutGroup>
		</window>
	</windows>
	<script execute="true" name="bootstrap">
	<![CDATA[
		require("serialize")
		
		currentStats = {}
		
		function updateStat(stats)
			currentStats = stats;
			--debugPrint("stats recieved")
			WindowXCallS("stat_window","updateStats",serialize(stats))
		end
		
		function loadStats(data)
			WindowXCallS("stat_window","updateStats",serialize(currentStats))
		end
	]]>
	</script>
	<script name="statWindowUI">
	<![CDATA[
		dofile(GetPluginInstallDirectory().."/statwindowui.lua")
	]]>
	</script>
	</plugin>
	<plugin author="Daniel Block" name="tick_clock" id="77">
	<triggers>
		<trigger title="ticker" pattern="^--&gt; TICK &lt;--.+$" interpretLiteral="true" fireOnce="false" enabled="true" sequence="1">
			<script function="ticked" fireWhen="always"/>
		</trigger>
		<trigger title="timecatcher" pattern="^  \*  It is (\d*)(am|pm|Midnight|Noon).+$" interpretLiteral="true" fireOnce="false" enabled="true" sequence="2">
			<script function="timeCatcher" fireWhen="always"/>
		</trigger>
		<trigger title="yearcatcher" pattern="^  \*  It is the year of the (.*).+$" interpretLiteral="true" fireOnce="false" enabled="true" sequence="1">
			<script function="yearCatcher" fireWhen="always"/>
		</trigger>
		<trigger title="moonSet" pattern="^You notice the (\w+) moon falling to the (west|east)\.$" interpretLiteral="true" fireOnce="false" enabled="true" sequence="1">
			<script function="OnMoonSet" fireWhen="always"/>
		</trigger>
		<trigger title="moonRise" pattern="^You see the (\w+) moon rising in the (west|east)\.$" interpretLiteral="true" fireOnce="false" enabled="true" sequence="1">
			<script function="OnMoonRise" fireWhen="always"/>
		</trigger>

	</triggers>
	<windows>
		<window name="clock_widget" id="9010" script="clockWidgetUI">
			<layoutGroup target="xlarge">
				<layout orientation="landscape"
				height="100"
				width="400"
				alignParentTop="true"/>
			</layoutGroup>
			<layoutGroup target="large">
				<layout orientation="landscape"
				height="50"
				width="200"
				alignParentTop="true"/>
			</layoutGroup>
		</window>
	</windows>
	<script name="clockWidgetUI">
	<![CDATA[
		dofile(GetPluginInstallDirectory().."/clockwidgetui.lua")
	]]>
	</script>
	<script execute="true" name="bootstrap">
	<![CDATA[
		require("serialize")
		
		function ticked()
			--debugPrint("ticked")
			timers.grey = timers.grey + 1
			timers.white = timers.white + 1
			timers.black = timers.black + 1
			if(timers.grey == 32) then
				timers.grey = 1
			end
			if(timers.black == 52) then
				timers.black = 1
			end
			if(timers.white == 67) then
				timers.white = 1
			end
			
			WindowXCallS("clock_widget","tickIncoming",serialize(timers))
		end
		
		function timeCatcher(name,line,map)

			--debugPrint("TIMERTEST: "..map["2"])
			str = ""
			if(map["2"] ~= nil) then
				num = 0
				if(map["2"] == "Midnight") then
					str = "00:00"
					num = 0
				elseif(map["2"] == "Noon") then
					str = "12:00"
					num = 12
				elseif(map["2"] == "am") then
					num = tonumber(map["1"])
					str = map["1"]..":00"
				elseif(map["2"] == "pm") then
					num = tonumber(map["1"])
					num = num+12
					str = num..":00"
				end
				--debugPrint(str)
				WindowXCallS("clock_widget","setTimeOrdinal",num)
			end
			
		end
		
		function yearCatcher(name,line,map)
			--debugPrint("in yearcatcher")
		end
		
		function OnMoonRise(name,line,map)
			moon = map["1"]
			--debugPrint(moon.." rising.")
			if(moon == "grey") then
				timers.grey = 23
				greyCatch = 1
			elseif(moon == "black") then
				timers.black = 38
				blackCatch = 1
			else
				timers.white = 49
				whiteCatch = 1
			end
		end
		
		function OnMoonSet(name,line,map)
			moon = map["1"]
			--debugPrint(moon.." setting.")
			if(moon == "grey") then
				timers.grey = 0
				greyCatch = 1
			elseif(moon == "black") then
				timers.black = 0
				blackCatch = 1
			else
				timers.white = 0
				whiteCatch = 1
			end
		end
		
		timers = {}
		timers.grey = -100
		timers.white = -100
		timers.black = -100
		
		greyCatch = 0
		whiteCatch = 0
		blackCatch = 0
	]]>
	</script>
	</plugin>
	<plugin author="Daniel Block" name="vitals_server" id="66">
		<triggers>
			<trigger title="vitals" pattern="%char.vitals" interpretLiteral="false" fireOnce="false" enabled="true" sequence="1">
				<script function="updateVitals" fireWhen="always"/>
			</trigger>
			
			<trigger title="maxstats" pattern="%char.maxstats" interpretLiteral="false" fireOnce="false" enabled="true" sequence="1">
				<script function="updateMaxes" fireWhen="always"/>
			</trigger>
			
			<trigger title="status" pattern="%char.status" interpretLiteral="false" fireOnce="false" enabled="true" sequence="1">
				<script function="updateStatus" fireWhen="always"/>
			</trigger>
			
			<trigger title="base" pattern="%char.base" interpretLiteral="false" fireOnce="false" enabled="true" sequence="1">
				<script function="updateBase" fireWhen="always"/>
			</trigger>
		</triggers>
		<windows>
			<window name="vitals_window" id="1010" script="vitalsWindowScript">
				<layoutGroup target="xlarge">
					<layout orientation="landscape"
							height="100"
							width="400"
							below="6022"/>
				</layoutGroup>
				<layoutGroup target="large">
					<layout orientation="landscape"
							height="50"
							width="200"
							below="6022"/>
				</layoutGroup>
			</window>
		</windows>
		<script name="bootstrap">
		<![CDATA[
			package.path = "/mnt/sdcard/BlowTorch/?.lua"
			require("serialize")
			--vitalsWindow = NewWindow("vitals_window",880,577,400,100,"vitalsWindowScript")
		
			vitals = {}
			vitals.hp = 100
			vitals.mana = 100
			vitals.enemypct = 0
			
			maxes = {}
			maxes.hp = 100
			maxes.mana = 100
			
			enemyPct = 100
			
			align = 0
			maxAlign = 2500
			minAlign = -2500
			
			tnl = 0
			toLevel = 0
			
			fighting = false
			
			function updateVitals(newVitals)
				vitals.hp = newVitals.hp
				vitals.mana = newVitals.mana
				if(fighting) then
					vitals.enemypct = enemyPct
				else
					vitals.enemypct = 0
				end
				WindowXCallS("vitals_window","updateVitals",serialize(vitals))
			end
			
			function updateMaxes(newMaxes)
				maxes.hp = newMaxes.maxhp
				maxes.mana = newMaxes.maxmana
				WindowXCallS("vitals_window","updateMaxes",serialize(maxes))
			end
			
			function updateStatus(newStatus)
				--debugPrint("player status updated!!!!")
				if(newStatus.enemypct == nil) then
					if(fighting) then
						--debugPrint("combat over")
						fighting = false
					else
						--debugPrint("combat not started")
					end
					WindowXCallS("vitals_window","updateEnemyPercent",0)
				else
					if(not fighting) then
						fighting = true
					end
					enemyPct = newStatus.enemypct
					--debugPrint("enemyPct: "..newStatus.enemypct)
					WindowXCallS("vitals_window","updateEnemyPercent",enemyPct)
				end
				
				if(newStatus.align ~= align) then
					align = newStatus.align
					WindowXCallS("vitals_window","updateAlign",align)
				end
				
				if(newStatus.tnl ~= tnl) then
					tnl = newStatus.tnl
					WindowXCallS("vitals_window","updateTNL",tnl)
				end
			end
			
			function updateBase(newBase)
				if(newBase.perlevel ~= toLevel) then
					toLevel = newBase.perlevel
					WindowXCallS("vitals_window","updateMaxPerLevel",toLevel)
				end
			end
			
			function initReady(str)
				info = {}
				info.hp = vitals.hp
				info.mp = vitals.mana
				info.maxhp = maxes.hp
				info.maxmp = maxes.mana
				info.enemypct = enemyPct
				info.tnl = tnl
				info.tolevel = toLevel
				info.align = align
				WindowXCallS("vitals_window","updateAll",serialize(info))
			end
			
			Send_GMCP_Packet("request char")
		]]>
		</script>
		<script name="vitalsWindowScript">
		<![CDATA[
			dofile(GetPluginInstallDirectory().."/vitalswindow.lua")
		]]>
		</script>
	</plugin>
	<plugin author="Daniel Block" name="map_miniwindow" id="30">
		<triggers>
			<trigger title="map_capture" pattern="^.*$" enabled="false" interpretLiteral="true" fireOnce="false">
				<script function="doMapCapture" fireWhen="always"/>
				<gag/>
			</trigger>
			<trigger title="map_capture_start" pattern="^&lt;MAPSTART&gt;$" interpretLiteral="true" fireOnce="false" enabled="true">
				<script function="startMapCapture" fireWhen="always"/>
				<gag/>
			</trigger>
			<trigger title="map_capture_end" pattern="^&lt;MAPEND&gt;$" interpretLiteral="true" fireOnce="false" enabled="true">
				<script function="endMapCapture" fireWhen="always"/>
				<gag/>
			</trigger>
		</triggers>
		<windows>
			<window name="map_window" id="6020" script="mapUIStartup">
				<layoutGroup target="xlarge">
					<layout orientation="landscape" alignParentRight="true" height="370" width="400" below="6021"/>
					<layout orientation="portrait" alignParentRight="true" height="370" width="400" below="6021"/>
				</layoutGroup>
				<layoutGroup target="large">
					<layout orientation="landscape" alignParentRight="true" height="200" width="200" below="6021"/>
					<layout orientation="portrait" alignParentRight="true" height="200" width="200" below="6021"/>
				</layoutGroup>
			</window>
			
		</windows>
		<script name="mapUIStartup">
			<![CDATA[
			parent = view:getParent()
			parent:removeView(view)
			scroller = parent:findViewById(6010)
			holder = scroller:getChildAt(0)
			holder:addView(view)
			view:setLinksEnabled(false)
			view:setTextSelectionEnabled(false)
			view:setScrollingEnabled(false)
			view:setBold(true)
			view:setCharacterSizes(21,1)
			
function updateHeaders(data)
	local tmp = loadstring(data)()
	title = tmp.title
	
	exits = tmp.exits
	
	titleLabel:setText(title)
	exitsLabel:setText(exits)
end

function OnCreate()
	--find the scroller and ask it for some specific children, i actually think we can just ask the root. lets try

	titleLabel = parent:findViewById(6021)
	exitsLabel = parent:findViewById(6022)
end
			
			
			]]>
		</script>
		<script execute="true" name="bootstrap">
		<![CDATA[
			dofile(GetPluginInstallDirectory().."/mapwindowserver.lua")
		]]>
		</script>
	</plugin>
	</plugins>
</blowtorch>