<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<root>
<plugins>
	<plugin author="Daniel Block" name="chat_miniwindow" id="50">
		<triggers>
			<trigger title="chats" pattern="^\{.{3,}?\}" interpretLiteral="true" fireOnce="false" enabled="true" sequence="1">
				<replace retarget="chats"/>
			</trigger>
			<trigger title="testmeo" pattern="^.*(adventurer).*$" interpretLiteral="true" fireOnce="false" enabled="true" sequence="5">
				<replace fireWhen="always" retarget="chats">pleasent young fellow</replace>
			</trigger>
			<trigger title="colorize" pattern="^.*(adventurer).*$" interpretLiteral="true" fireOnce="false" enabled="true" sequence="3">
				<color>45</color>
			</trigger>
		</triggers>
		<script name="bootstrap">
			<![CDATA[
				dofile("/mnt/sdcard/BlowTorch/chatserver.lua")
			]]>
		</script>
		<script name="chatwindow">
			<![CDATA[
				dofile("/mnt/sdcard/BlowTorch/chatwindow.lua")
			]]>
		</script>
	</plugin>
	<plugin author="Daniel Block" name="map_miniwindow" id="30">
		<triggers>
			<trigger title="map_capture" pattern="^.*$" enabled="false" interpretLiteral="true" fireOnce="false">
				<gag retarget="map_window"/>
			</trigger>
			<trigger title="map_capture_start" pattern="^&lt;MAPSTART&gt;$" interpretLiteral="true" fireOnce="false" enabled="true">
				<script function="startMapCapture" fireWhen="always"/>
				<gag/>
			</trigger>
			<trigger title="map_capture_end" pattern="^&lt;MAPEND&gt;$" interpretLiteral="true" fireOnce="false" enabled="true">
				<script function="endMapCapture" fireWhen="always"/>
				<gag/>
			</trigger>
		</triggers>
		<script name="bootstrap">
			<![CDATA[
function startMapCapture() 
	--Note("STARTING MAP CAPTURE")
	TriggerEnabled("map_capture",true)
end

function endMapCapture() 
	--Note("ENDING MAP CAPTURE")
	TriggerEnabled("map_capture",false)
	DrawWindow("map_window")
end
NewWindow("map_window",880,177,400,400)
WindowBuffer("map_window",true)
			]]>
		</script>
	</plugin>
	<plugin author="Daniel Block" name="button_window" id="10">
		<script name="bootstrap">
			<![CDATA[
			dofile("/mnt/sdcard/BlowTorch/buttonserver.lua")
			NewWindow("button_window",0,0,0,0,"buttonwindow")
			]]>
		</script>
		<script name="buttonwindow">
			<![CDATA[
dofile("/mnt/sdcard/BlowTorch/buttonwindow.lua")
--debugPrint("custom loaded file go!")
]]>
  </script>
	</plugin>
  <plugin author="Daniel Block" name="plugin" id="100">
  <triggers>
    <trigger sequence="10" title="autologin username" pattern="What be thy name, pleasent young fellow?" interpretLiteral="false" fireOnce="true" hidden="true" enabled="true">
      <toast message="autologin username" delay="1" fireWhen="windowOpen" />
	  <ack with="stampede"/>
	</trigger>


    <trigger title="idle preventer" pattern="Your eyes glaze over." interpretLiteral="false" fireOnce="false" enabled="true">
      <notification title="BlowTorch Triggered" message="YOU HAVE IDLED. ATTEMPTING TO MAKE YOU UNIDLE." fireWhen="none" useSound="true" soundPath="/sdcard/BaardTERM/New Mario Coin Sms V_2.mp3" useLights="false" useVibrate="false" spawnNew="false" useOngoing="false" />
      <ack with="afk;a;afk" fireWhen="always" />
    </trigger>
    <trigger title="quest timer" pattern="QUEST: You may now quest again." interpretLiteral="false" fireOnce="false" enabled="true">
      <notification title="BlowTorch Triggered" message="TIME TO QUEST QUESTY QUEST." fireWhen="windowClosed" useSound="true" soundPath="/system/media/audio/ringtones/NewPlayer.ogg" useLights="true" lightColor="ff00ffff" useVibrate="true" vibrateType="3" spawnNew="false" useOngoing="false" />
      <toast message="TIME TO QUEST" delay="2" fireWhen="always" />
      <ack with="quit" fireWhen="none" />
    </trigger>
    <trigger title="Tellwatch" pattern="^(.+) just sent you a tell.$" interpretLiteral="true" fireOnce="false" enabled="true">
      <notification title="NEW TELL" message="$1 is talking to you." fireWhen="always" useSound="true" soundPath="" useLights="true" lightColor="0" useVibrate="true" vibrateType="0" spawnNew="false" useOngoing="false" />
    </trigger>
    <trigger title="autologin password" pattern="Password:" interpretLiteral="false" fireOnce="true" hidden="true" enabled="true">
      <ack with="mudsrrad" fireWhen="windowOpen" />
      <toast message="autologin password" delay="1" fireWhen="windowOpen" />
    </trigger>
    <trigger title="DISARM" pattern="DISARMS you" interpretLiteral="false" fireOnce="false" enabled="true">
      <toast message="you have been disarmed." delay="1" fireWhen="always" />
      <ack with="wield axe" fireWhen="always" />
	</trigger>

	
  </triggers>
  <script name="bootstrap">
	  <![CDATA[
--load scripts

--only one so far.


function testCommandHandler(args)
	debugPrint("Inside the testCommandHandler yo, peep dis raw deal!"..args)
end

RegisterSpecialCommand("testcommand","testCommandHandler")

--debugPrint("button server functions loaded")
--set up windows.
MainWindowSize(0,177,880,500)


--NewWindow("lua_window",880,577,400,100,"windowscript")


--debugPrint("startup script loaded!")
	  ]]>
  </script>


  <script name="windowscript">
	  <![CDATA[
items = {}
function getView(num,convertView)
	cView = nil
	if(not convertView) then
		--debugPrint("no convertview, inflating..")
		cView = luajava.newInstance("android.widget.TextView",view:getContext())
	else
		--debugPrint("using convertView:"..convertView:toString())
		cView = convertView	
	end
	--debugPrint("num:"..num)
	num=num+1
	val = items[num]
	--debugPrint("item:"..val)
	cView:setText(val)
	cView:setTextSize(32)
	return cView
end

paint = luajava.newInstance("android.graphics.Paint")
touchX = 50
touchY = 50
width = 50
height = 50
rect = luajava.newInstance("android.graphics.Rect")
touchin = false
MotionEvent = luajava.bindClass("android.view.MotionEvent")
bounds = 0
fingerdown = false

function OnCreate() 
	updateRect()
	paint:setARGB(0xFF,0x00,0xAA,0x33)
	bounds = getBounds()
	addOptionCallback("optionClicked","LUAWIN",nil)
	addOptionCallback("listTest","List Test",nil)
end

listclicker = {}
function listclicker.onItemClick(parent,v,position,id)
	debugPrint("List item clicked: "..items[position+1])
end

listclicker_cb = luajava.createProxy("android.widget.AdapterView$OnItemClickListener",listclicker)

function listTest()
	local nums = table.getn(items)
	table.insert(items,"foo"..nums)
	table.insert(items,"bar"..nums)
	table.insert(items,"baz"..nums)
	table.insert(items,"naf"..nums)
	table.insert(items,"miu"..nums)

	

	pcon = view:getContext()
	tb = getTableAdapter("items","getView")
	
	lv = luajava.newInstance("android.widget.ListView",pcon)
	lv:setAdapter(tb)
	lv:setOnItemClickListener(listclicker_cb)
	debugPrint("Starting custom view, kerplow.")
	dialog = luajava.newInstance("com.happygoatstudios.bt.window.LuaDialog",pcon,lv);
	dialog:show()

	debugPrint("finished dialog stuffs")



	--tb:notifyDataSetInvalidated()

	--debugPrint("getting builder instance")
	--local builder = luajava.newInstance("android.app.AlertDialog$Builder",pcon)
	--debugPrint("Setting view")
	--builder:setView(lv)
	
	--builder:setPositiveButton("Hezo",optYes_cb)
	--builder:setNegativeButton("Mezo",optNo_cb)
	--builder:setTitle("LUA MESSAGE")
	--builder:setMessage("I'm from Lua land. Do you think I am cool?")
	
	--local alert = builder:create()
	--alert:show()

end

optYes = {}
optNo = {}
function optYes.onClick(item,which)
	debugPrint("YES BUTTON CLICKED!!")
end

function optNo.onClick(item,which)
	debugPrint("NO BUTTON CLICKED!")
end

optYes_cb = luajava.createProxy("android.content.DialogInterface$OnClickListener",optYes)
optNo_cb = luajava.createProxy("android.content.DialogInterface$OnClickListener",optNo)

seeker = {}
function seeker.onProgressChanged(seekBar,progress,fromUser)
	debugPrint("SeekerChanged: "..progress)
end

seeker_cb = luajava.createProxy("android.widget.SeekBar$OnSeekBarChangeListener",seeker)

function optionClicked()
	debugPrint("OHOHOHOHOH NEW OPTIONS FOR WINDOWZZZ")
	context = view:getContext()

	nview = luajava.newInstance("android.widget.SeekBar",context)

	--params = luajava.newInstance("android.view.ViewGroup$LayoutParams",-1,300)

	--nview:setLayoutParams(params)

	nview:setOnSeekBarChangeListener(seeker_cb)



	builder = luajava.newInstance("android.app.AlertDialog$Builder",context)
	builder:setView(nview)
	builder:setPositiveButton("LUAYES",optYes_cb)
	builder:setNegativeButton("LUANO",optNo_cb)
	builder:setTitle("LUA MESSAGE")
	builder:setMessage("I'm from Lua land. Do you think I am cool?")
	
	alert = builder:create()
	alert:show()	
end

function updateRect()
	left = touchX - (width/2)
	right = touchX + (width/2)
	top = touchY - (width/2)
	bottom = touchY + (width/2)
	rect:set(left,top,right,bottom)
end

function OnTouchEvent(event)
	x = event:getX()
	y = event:getY()



	action = event:getAction()

	if(fingerdown == false and action == MotionEvent.ACTION_DOWN) then
		--check if press in in bounds
		if(bounds:contains(x,y)) then
			fingerdown = true
			x = x - bounds.left
			y = y - bounds.top
			touchX = x;
			touchY = y;
			updateRect()
			invalidate()
			return true
		else
			return false
		end
	end

	if(action == MotionEvent.ACTION_UP) then
		fingerdown = false
	end

	x = x - bounds.left
	y = y - bounds.top

	--maction = MotionEvent.ACTION_MOVE
	--debugPrint("Pointer at: "..x..","..y.." action:"..action.." ACTION:"..maction)
	if(action == MotionEvent.ACTION_MOVE) then
		paint:setARGB(0xFF,0xFF,0x00,0x00)	
		touchX = x
		touchY = y
		updateRect()
	else 
		paint:setARGB(0xFF,0x00,0x00,0xFF)
	end
	invalidate()

	return true
end

function touched()
	if(touchin == false) then
		touchin = true
		invalidate()
	end
end

function nottouched()
	if(touchin == true) then
		touchin = false
		invalidate()
	end
end

function OnDraw(canvas)
	
	canvas:drawRect(rect,paint)

end

	  ]]>
  </script>
  
  <buttonsets>
	<buttonset name="a" primaryColor="7799FF22" selectedColor="77FF3300" flipColor="770033FF">
		<button label="smorp" x="200" y="400"/>
		<button label="spliz" x="300" y="400"/>
	</buttonset>
	<buttonset name="b">
		<button label="blah" x="100" y="100"/>
		<button label="bliz" x="200" y="200"/>
		<button label="bloop" x="300" y="300" primaryColor="FFFF00FF"/>
	</buttonset>
  </buttonsets>
  </plugin>
</plugins>
</root>
